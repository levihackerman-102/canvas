/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface IRedotPayVault  {
    function initialize() external;

    function acceptPayment(address token, uint256 amount, address recipient, uint256 condition, uint256 release_time) external returns (uint256);

    function freezePayment(uint256 payment_id, uint256 freeze_period) external;

    function releasePayment(uint256 payment_id) external;

    function refundPayment(uint256 payment_id) external;

    function getPayment(uint256 payment_id) external view returns (address, address, address, uint256, uint256, uint256, uint256, uint256);

    function getUserBalance(address user, address token) external view returns (uint256);

    function getFrozenBalance(address user, address token) external view returns (uint256);

    function getPaymentCounter() external view returns (uint256);

    function owner() external view returns (address);

    function isAuthorizedApprover(address addr) external view returns (bool);

    function isPaused() external view returns (bool);

    function addApprover(address approver) external;

    function removeApprover(address approver) external;

    function pause() external;

    function unpause() external;

    function requireOwner() external view;

    function requireOwnerOrApprover() external view;

    function requireNotPaused() external view;
}