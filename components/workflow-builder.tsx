"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { WorkflowCanvas } from "@/components/workflow-canvas"
import { BlockPalette } from "@/components/block-palette"
import { WorkflowSettings } from "@/components/workflow-settings"
import { workflowEngine } from "@/lib/automation/workflow-engine"
import { Share, Download, Code, Zap } from "lucide-react"

export function WorkflowBuilder() {
  const [activeWorkflow, setActiveWorkflow] = useState<string | null>(null)
  const [selectedBlock, setSelectedBlock] = useState<any>(null)
  const [workflowNodes, setWorkflowNodes] = useState<any[]>([])

  // Convert WorkflowBlock to WorkflowNode format expected by workflow engine
  const convertBlocksToNodes = (blocks: any[]) => {
    return blocks.map(block => ({
      id: block.id,
      type: block.type,
      name: block.name,
      config: block.config || {},
      connections: block.connections || [],
      position: { x: block.x, y: block.y }
    }))
  }

  const exportWorkflow = () => {
    console.log("Exporting workflow")
    
    if (workflowNodes.length === 0) {
      alert("No workflow blocks to export. Please create a workflow first.")
      return
    }

    const workflowId = activeWorkflow || `workflow_${Date.now()}`
    
    try {
      // Convert blocks to nodes
      const nodes = convertBlocksToNodes(workflowNodes)
      
      // Check if this is a VM workflow
      const hasVMBlocks = nodes.some(node => node.type.startsWith("vm-"))
      
      if (hasVMBlocks) {
        // Export as VM bytecode
        const vmExport = workflowEngine.exportWorkflowForVM(workflowId, nodes)
        
        const exportData = {
          ...vmExport,
          exportType: "vm-bytecode",
          instructions: {
            usage: "Use this bytecode with the VM contract to execute your workflow",
            deployment: "Call VM.execute(bytecode) with the generated bytecode",
            integration: "Copy the bytecode and use it in your smart contract calls"
          }
        }

        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: "application/json" })
        const url = URL.createObjectURL(blob)
        const a = document.createElement("a")
        a.href = url
        a.download = `${workflowId}-vm-export.json`
        a.click()
        URL.revokeObjectURL(url)
        
        console.log("VM export completed:", vmExport)
      } else {
        // Export as contract
        const contractExport = workflowEngine.exportWorkflowForContract(workflowId, nodes)
        
        const exportData = {
          ...contractExport,
          exportType: "contract-ready",
          instructions: {
            usage: "Use this export to generate a router contract for your merchant integration",
            deployment: "Deploy the generated contract to Arbitrum and use the contract address in your website",
            integration: "Call executeWorkflow() function with the required parameters from your web3 integration"
          }
        }

        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: "application/json" })
        const url = URL.createObjectURL(blob)
        const a = document.createElement("a")
        a.href = url
        a.download = `${workflowId}-contract-export.json`
        a.click()
        URL.revokeObjectURL(url)
        
        console.log("Contract export completed:", contractExport)
      }
    } catch (error) {
      console.error("Export failed:", error)
      alert("Failed to export workflow. Please check the console for details.")
    }
  }

  const generateCode = () => {
    console.log("Generating code")
    
    if (workflowNodes.length === 0) {
      alert("No workflow blocks to generate code from. Please create a workflow first.")
      return
    }

    const workflowId = activeWorkflow || `workflow_${Date.now()}`
    
    try {
      // Convert blocks to nodes
      const nodes = convertBlocksToNodes(workflowNodes)
      
      // Check if this is a VM workflow
      const hasVMBlocks = nodes.some(node => node.type.startsWith("vm-"))
      
      if (hasVMBlocks) {
        // Generate VM integration code
        const vmExport = workflowEngine.exportWorkflowForVM(workflowId, nodes)
        
        // Create VM integration guide
        const vmIntegrationGuide = `
# VM Workflow Integration Guide

## Bytecode
\`\`\`
${vmExport.bytecode}
\`\`\`

## Smart Contract Integration
\`\`\`solidity
// Example integration in your smart contract
pragma solidity ^0.8.0;

import "./VM.sol";

contract MyContract {
    VM public vmContract;
    
    constructor(address _vmAddress) {
        vmContract = VM(_vmAddress);
    }
    
    function executeMyWorkflow() external returns (uint256) {
        bytes memory bytecode = hex"${vmExport.bytecode.slice(2)}";
        return vmContract.execute(bytecode);
    }
}
\`\`\`

## Web3 Integration
\`\`\`javascript
// Example integration in your website
const vmContract = new web3.eth.Contract(VM_ABI, VM_CONTRACT_ADDRESS);

// Execute the workflow
const result = await vmContract.methods.execute("${vmExport.bytecode}").call();
console.log("Workflow result:", result);
\`\`\`

## Workflow Details
- Workflow ID: ${vmExport.workflowId}
- VM Instructions: ${vmExport.vmInstructions.length}
- Buffer Slots Used: ${vmExport.slotAllocations.length}
- Initial Values: [${vmExport.initialValues.join(', ')}]
- Generated: ${new Date(vmExport.metadata.createdAt).toISOString()}

## VM Instructions
${vmExport.vmInstructions.map((instr, i) => 
  `${i + 1}. ${instr.nodeName} (opcode ${instr.opcode}): args=[${instr.args.join(',')}] result=${instr.result || 'N/A'}`
).join('\n')}

## Slot Allocations
${vmExport.slotAllocations.map(slot => 
  `- Slot ${slot.slotIndex}: ${slot.outputName} (${slot.isInput ? 'input' : 'result'})${slot.isInput ? ' = ' + slot.value : ''}`
).join('\n')}
        `
        
        const guideBlob = new Blob([vmIntegrationGuide], { type: "text/markdown" })
        const guideUrl = URL.createObjectURL(guideBlob)
        const guideLink = document.createElement("a")
        guideLink.href = guideUrl
        guideLink.download = `${workflowId}-vm-integration-guide.md`
        guideLink.click()
        URL.revokeObjectURL(guideUrl)
        
        alert("VM bytecode and integration guide generated successfully! Check your downloads.")
        console.log("Generated VM export:", vmExport)
        
      } else {
        // Generate Solidity contract code (existing functionality)
        const contractExport = workflowEngine.exportWorkflowForContract(workflowId, nodes)
        
        // Generate Solidity router contract code
        const solidityCode = workflowEngine.generateRouterContractCode(contractExport)
        
        // Create downloadable Solidity file
        const blob = new Blob([solidityCode], { type: "text/plain" })
        const url = URL.createObjectURL(blob)
        const a = document.createElement("a")
        a.href = url
        a.download = `WorkflowRouter_${workflowId.replace(/[^a-zA-Z0-9]/g, '_')}.sol`
        a.click()
        URL.revokeObjectURL(url)
        
        // Also create integration guide
        const integrationGuide = `
# Workflow Integration Guide

## Contract Deployment
1. Deploy the generated Solidity contract to Arbitrum
2. Set the RedotPay contract address: ${contractExport.contractCalls.find(c => c.contractAddress.includes('REDOT_PAY'))?.contractAddress || 'UPDATE_ADDRESS'}
3. Verify the contract on Arbiscan

## Website Integration
\`\`\`javascript
// Example integration in your website
const workflowContract = new web3.eth.Contract(abi, contractAddress);

// Execute the workflow
await workflowContract.methods.executeWorkflow(
  // Add your parameters here based on the workflow
).send({ from: userAddress });
\`\`\`

## Workflow Details
- Workflow ID: ${contractExport.workflowId}
- Contract Calls: ${contractExport.contractCalls.length}
- Generated: ${new Date(contractExport.metadata.createdAt).toISOString()}

## Contract Methods
${contractExport.contractCalls.map(call => 
  `- ${call.methodName}(${call.parameterNames.join(', ')}) - ${call.nodeName}`
).join('\n')}
        `
        
        const guideBlob = new Blob([integrationGuide], { type: "text/markdown" })
        const guideUrl = URL.createObjectURL(guideBlob)
        const guideLink = document.createElement("a")
        guideLink.href = guideUrl
        guideLink.download = `${workflowId}-integration-guide.md`
        guideLink.click()
        URL.revokeObjectURL(guideUrl)
        
        alert("Router contract and integration guide generated successfully! Check your downloads.")
        console.log("Generated contract code:", solidityCode)
      }
    } catch (error) {
      console.error("Code generation failed:", error)
      alert("Failed to generate code. Please check the console for details.")
    }
  }

  const handleBlockSelect = (block: any) => {
    console.log("Block selected:", block) // Debug
    setSelectedBlock(block)
  }

  const handleUpdateBlockConfig = (blockId: string, config: Record<string, any>) => {
    setWorkflowNodes(prev => 
      prev.map(node => 
        node.id === blockId ? { ...node, config } : node
      )
    )
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 h-[calc(100vh-200px)]">
      {/* Block Palette */}
      <div className="lg:col-span-1">
        <Card className="h-full">
          <CardHeader className="pb-4">
            <CardTitle className="text-lg">Workflow Blocks</CardTitle>
            <p className="text-xs text-muted-foreground">Drag blocks to canvas to build your workflow</p>
          </CardHeader>
          <CardContent className="p-0">
            <BlockPalette />
          </CardContent>
        </Card>
      </div>

      {/* Main Canvas */}
      <div className="lg:col-span-2">
        <Card className="h-full">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <CardTitle className="text-lg">Workflow Canvas</CardTitle>
                {activeWorkflow && <Badge variant="secondary">{activeWorkflow}</Badge>}
              </div>
              <div className="flex items-center gap-2">
                <Button variant="ghost" size="sm" onClick={exportWorkflow}>
                  <Download className="w-4 h-4" />
                </Button>
                <Button variant="ghost" size="sm" onClick={generateCode}>
                  <Code className="w-4 h-4" />
                </Button>
                <Button variant="ghost" size="sm">
                  <Share className="w-4 h-4" />
                </Button>
                <Button size="sm">
                  <Zap className="w-4 h-4 mr-2" />
                  Deploy
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-0 h-[calc(100%-80px)]">
            <WorkflowCanvas 
          onNodesChange={setWorkflowNodes} 
          onBlockSelect={handleBlockSelect}
        />
          </CardContent>
        </Card>
      </div>

      {/* Settings Panel */}
      <div className="lg:col-span-1">
        <Card className="h-full">
          <CardHeader className="pb-4">
            <CardTitle className="text-lg">Configuration</CardTitle>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="workflow" className="w-full">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="workflow">Workflow</TabsTrigger>
                <TabsTrigger value="block">Block Info</TabsTrigger>
                <TabsTrigger value="deploy">Deploy</TabsTrigger>
              </TabsList>
              <TabsContent value="workflow" className="mt-4">
                <WorkflowSettings />
              </TabsContent>
              <TabsContent value="block" className="mt-4">
                {selectedBlock ? (
          <div>
            {selectedBlock.type.startsWith('vm-') ? (
              selectedBlock.type === 'vm-number-constant' || selectedBlock.type === 'vm-bool-constant' ? (
                <div className="text-sm text-muted-foreground p-4 text-center border-2 border-dashed border-gray-300 rounded-lg">
                  <div className="mb-2">📊 {selectedBlock.type === 'vm-number-constant' ? 'Number' : 'Boolean'} Constant Block Selected</div>
                  <div className="text-xs">Edit the value directly on the block in the canvas.</div>
                </div>
              ) : (
                <div className="text-sm text-muted-foreground p-4 text-center border-2 border-dashed border-gray-300 rounded-lg">
                  <div className="mb-2">🔗 VM Block Selected</div>
                  <div className="text-xs">This block works automatically through connections. No configuration needed!</div>
                </div>
              )
            ) : (
                      <div className="space-y-4">
                        <h4 className="text-sm font-medium">Block Configuration</h4>
                        <div className="text-sm text-muted-foreground">
                          Configuration for {selectedBlock.type} blocks is not yet implemented.
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-sm text-muted-foreground p-4 text-center border-2 border-dashed border-gray-300 rounded-lg">
                    <div className="mb-2">👆 Select a block to see its info</div>
                    <div className="text-xs">VM blocks work automatically through connections</div>
                  </div>
                )}
              </TabsContent>
              <TabsContent value="deploy" className="mt-4">
                <div className="space-y-4">
                  <h4 className="text-sm font-medium">Deployment Options</h4>
                  <div className="space-y-3">
                    <Button
                      variant="outline"
                      size="sm"
                      className="w-full justify-start bg-transparent"
                      onClick={exportWorkflow}
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Export Configuration
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="w-full justify-start bg-transparent"
                      onClick={generateCode}
                    >
                      <Code className="w-4 h-4 mr-2" />
                      Generate API Code
                    </Button>
                    <Button variant="outline" size="sm" className="w-full justify-start bg-transparent">
                      <Share className="w-4 h-4 mr-2" />
                      Webhook URLs
                    </Button>
                  </div>
                  <div className="text-xs text-muted-foreground mt-4">
                    Deploy your workflow to start processing auctions automatically
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
